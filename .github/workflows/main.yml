name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    # Make sure everything is still working by running the CI weekly.
    - cron: "0 5 * * 1"

env:
  PUB_ENVIRONMENT: bot.github

jobs:
  analyze:
    runs-on: ubuntu-latest
    outputs:
      dart-version: ${{ steps.setup-dart.outputs.dart-version }}
      cache-key: dart-packages-${{ steps.deps-after.outputs.lockfiles }}

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        id: setup-dart
      # We would like to update the cache if the pubspec.lock file changes after running
      # pub upgrade. That requires including the pubspec.lock in the key, but it's not part
      # of the repository. So, we only restore here and then upload the cache if there was a
      # miss or if the pubspec.lock files have changed.
      - uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            hrana/pubspec.lock
            drift_hrana/pubspec.lock
          # We can only use fallback keys here since we don't know the lockfile contents yet.
          key: dart-packages-stub
          restore-keys: |
            dart-packages-
      - name: "Hash pubspec lockfiles before pub upgrade"
        id: deps-before
        run: |
          echo "lockfiles=${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT

      - name: "Install hrana dependencies"
        working-directory: hrana
        run: dart pub upgrade
      - name: "Install drift_hrana dependencies"
        working-directory: drift_hrana
        run: dart pub upgrade

      - name: "Hash pubspec lockfiles after pub upgrade"
        id: deps-after
        run: |
          echo "lockfiles=${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT

      - name: "Ensure formatted"
        run: dart format --output=none --set-exit-if-changed .

      - name: "Analyze project"
        run: dart analyze --fatal-infos

      - name: "Update cache due to changed pubspec.lock"
        if: ${{ !failure() && ( steps.deps-after.outputs.lockfiles != steps.deps-before.outputs.lockfiles) }}
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            hrana/pubspec.lock
            drift_hrana/pubspec.lock
          key: dart-packages-${{ steps.deps-after.outputs.lockfiles }}

  test:
    strategy:
      matrix:
        package: [hrana, drift_hrana]
    runs-on: ubuntu-latest
    # analyze creates the cache, avoid downloading dependencies again here
    needs: analyze

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ needs.analyze.outputs.dart-version }}
      - uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            hrana/pubspec.lock
            drift_hrana/pubspec.lock
          key: ${{ needs.analyze.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: "Install Turso CLI"
        run: curl -sSfL https://get.tur.so/install.sh | bash

      - name: "Get dependencies"
        working-directory: ${{ matrix.package }}
        run: dart pub get --offline

      - name: "Run tests"
        working-directory: ${{ matrix.package }}
        run: dart test
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
